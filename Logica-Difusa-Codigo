public class SistemaExpertoDifuso {

    // Definir las funciones de pertenencia para la calidad y el servicio
    public static double membresiaPobre(double x) {
        if (x <= 3) return 1.0;
        else if (x > 3 && x < 5) return (5 - x) / 2;
        else return 0.0;
    }

    public static double membresiaAceptable(double x) {
        if (x > 2 && x <= 5) return (x - 2) / 3;
        else if (x > 5 && x < 8) return (8 - x) / 3;
        else return 0.0;
    }

    public static double membresiaBuena(double x) {
        if (x >= 7) return 1.0;
        else if (x > 5 && x < 7) return (x - 5) / 2;
        else return 0.0;
    }

    // Definir las funciones de pertenencia para la propina
    public static double membresiaBaja(double x) {
        if (x <= 5) return 1.0;
        else if (x > 5 && x < 10) return (10 - x) / 5;
        else return 0.0;
    }

    public static double membresiaMedia(double x) {
        if (x > 5 && x <= 13) return (x - 5) / 8;
        else if (x > 13 && x < 20) return (20 - x) / 7;
        else return 0.0;
    }

    public static double membresiaAlta(double x) {
        if (x >= 18) return 1.0;
        else if (x > 13 && x < 18) return (x - 13) / 5;
        else return 0.0;
    }

    // Fusificación: Convertir entradas nítidas en grados de pertenencia
    public static double[] fuzzificarCalidad(double calidad) {
        double[] resultado = new double[3];
        resultado[0] = membresiaPobre(calidad);      // Pobre
        resultado[1] = membresiaAceptable(calidad);  // Aceptable
        resultado[2] = membresiaBuena(calidad);      // Buena
        return resultado;
    }

    public static double[] fuzzificarServicio(double servicio) {
        double[] resultado = new double[3];
        resultado[0] = membresiaPobre(servicio);      // Pobre
        resultado[1] = membresiaAceptable(servicio);  // Aceptable
        resultado[2] = membresiaBuena(servicio);      // Buena
        return resultado;
    }

    // Evaluación de reglas difusas
    public static double evaluarReglas(double[] calidad, double[] servicio) {
        // Regla 1: Si calidad es pobre O servicio es pobre, entonces propina es baja
        double regla1 = Math.max(calidad[0], servicio[0]);

        // Regla 2: Si servicio es aceptable, entonces propina es media
        double regla2 = servicio[1];

        // Regla 3: Si servicio es bueno O calidad es buena, entonces propina es alta
        double regla3 = Math.max(servicio[2], calidad[2]);

        // Agregación: Combinar las conclusiones de las reglas
        double propinaBaja = regla1;
        double propinaMedia = regla2;
        double propinaAlta = regla3;

        // Desfusificación: Método del centroide (simplificado)
        double numerador = 0.0;
        double denominador = 0.0;

        for (int i = 0; i <= 25; i++) {
            double membresia = Math.max(
                Math.min(propinaBaja, membresiaBaja(i)),
                Math.max(
                    Math.min(propinaMedia, membresiaMedia(i)),
                    Math.min(propinaAlta, membresiaAlta(i))
                )
            );
            numerador += i * membresia;
            denominador += membresia;
        }

        if (denominador == 0) return 0.0;
        return numerador / denominador; // Valor desfusificado
    }

    public static void main(String[] args) {
        // Entradas nítidas
        double calidad = 6.5;
        double servicio = 9.8;

        // Fusificación
        double[] calidadDifusa = fuzzificarCalidad(calidad);
        double[] servicioDifuso = fuzzificarServicio(servicio);

        // Evaluación de reglas y desfusificación
        double propina = evaluarReglas(calidadDifusa, servicioDifuso);

        // Salida
        System.out.println("El valor de la propina es: " + propina);
    }
}
